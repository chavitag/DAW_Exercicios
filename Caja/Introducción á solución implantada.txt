A solución implementada sigue a seguinte filosofía:

	- Debemos separar a lóxica do programa do acceso ós datos.

		Esto permitirá cambiar o modo de acceder aos datos, e incluso o tipo de soporte dos mesmos (unha BBDD relacional,
		unha conexión de rede, un RandomAccessFile, Streams, Readers ... etc)

	- Debemos separar a funcionalidade en clases "autónomas" que teñan sentido. Neste caso distinguiermos:
		-Producto
			Esta clase nos permitirá instanciar productos. Simplemente terá como atributos o código, nome e precio do producto e os
			"setters" e "getters" corresponentes. Tamén terá sobreescrito o método toString para representar na pantalla de modo axeitado
			o producto.

		-Venta
			Esta clase representa unha liña de venta dun producto. Terá como atributos o Producto vendido e a data da venta, e sobreescribirá
			toString para representar de modo axeitado unha liña de venta. Unha venta se crea a partir do código do producto únicamente

		-ListaProductos
			Esta clase permitirá acceder aos distintos productos existentes. A súa implementación pode variar pero nos proporcionará a 
			seguinte funcionalidade:

		    public void addProducto(Producto pr); 	// Engade un novo producto
		    public void delProducto(int code);			// Elimina un Producto
		    public Producto getProducto(int code);	// devolve un Producto a partir do seu código

			(Na seguinte avaliación veremos que esto é en realidade a definición dunha Interface)

		-ListaVentas
			De modo análogo a ListaProductos nos permitirá xestionar as distintas Venta. A funcionalidade necesaria é a seguinte:
		    public void addVenta(Venta v);	// Engade á venta unha nova venta
		    public String toString();			// Representa a venta completa en String

		- Caja
			E o programa principal, que amosará o menú e permitirá operar. O seu método máis importante é doCaja(), que se encargará
			de procesar a lista de ventas do día e actualizar os datos da caixa.

		- DataAccess
			 Permite realizar as distintas operacións necesarias sobre os datos. Os métodos necesarios serán:

				Producto leeProducto(); 	// Lee e devolve un Producto
				void saveProducto();			// Almacena o Producto
				Venta leeVenta();				// Lee de devolve unha Venta
				void saveVenta();				// Almacena a Venta
				void actualizaCaixa(Producto pr);	// Modifica a caixa actualizando o nº de ventas

			Esta clase so se utilizará dende o método doCaixa e dende as clases ListaProductos e ListaVentas.

		O proceso a seguir será o seguinte:
			- No inicio do programa, se crea un novo Obxecto ListaProductos.		
			- Se inicia unha Venta:
					Creamos un novo obxecto ListaVentas.
					Mentras non se introduzca -1 no código, se pide o código de producto, creando un obxecto Venta, que engadimos á ListaVentas.
					Visualizamos o Obxecto ListaVentas-
			
			- Se fai caixa:
					Mentras teñamos ventas, leeremos a Venta e actualizamos a caixa co producto.


				
